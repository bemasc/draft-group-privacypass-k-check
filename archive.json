{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-08-20T00:19:05.749121+00:00",
  "repo": "chris-wood/draft-group-privacypass-k-check",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJv72Bc5pzdtY",
      "title": "Enforce a minimum validity time?",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/issues/1",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the resource can get refreshed very frequently (like every second), a client could still be targeted without detecting an attack. One solution is to have a minimum time for validity.",
      "createdAt": "2023-06-26T15:54:23Z",
      "updatedAt": "2023-07-06T11:30:18Z",
      "closedAt": "2023-07-06T11:30:18Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You could also have the mirror police the keys being distributed to make sure that key rotations seem reasonable, and there's not a flipping between keys that could look like targeting.",
          "createdAt": "2023-06-26T15:57:35Z",
          "updatedAt": "2023-06-26T15:57:35Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Or ensure that enough clients saw this key before the key changed...",
          "createdAt": "2023-06-26T16:01:09Z",
          "updatedAt": "2023-06-26T16:01:09Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "[From @dvorak42](https://github.com/chris-wood/draft-group-privacypass-k-check/pull/2#discussion_r1245310746).",
          "createdAt": "2023-06-28T14:40:47Z",
          "updatedAt": "2023-06-28T14:40:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "#2 includes a minimum validity time as a mirror configuration parameter. ",
          "createdAt": "2023-06-29T14:05:02Z",
          "updatedAt": "2023-06-29T14:05:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Closing as resolved by #2.",
          "createdAt": "2023-07-06T11:30:18Z",
          "updatedAt": "2023-07-06T11:30:18Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJv72Bc5rHLZC",
      "title": "Consistency at the end of key validity",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/issues/5",
      "state": "OPEN",
      "author": "tfpauly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If a key config doesn't cover its expiry time, a client could potentially have checked a key as being valid and continue to use it over time as long as it sees challenges from the origin using that key.\r\n\r\nHowever, if the key had actually rotated for everyone else, a client may be targeted by being the only one in the set still using an old key.",
      "createdAt": "2023-07-10T15:42:52Z",
      "updatedAt": "2023-07-10T15:46:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Adding a `not-after` value to a key mitigates this for the scheduled rotation cases.",
          "createdAt": "2023-07-10T15:44:47Z",
          "updatedAt": "2023-07-10T15:44:47Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alternatively, the k-check proxy could tell clients about the cadence to check in",
          "createdAt": "2023-07-10T15:46:06Z",
          "updatedAt": "2023-07-10T15:46:06Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJv72Bc5tqMz-",
      "title": "Batched fetching for k-check.",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/issues/7",
      "state": "OPEN",
      "author": "dvorak42",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "For some use cases, it is useful to be able to fetch multiple configurations at the same time to reduce the number of fetches/ensure consistency across multiple resources.\r\n\r\nThis tracks adding a batched mode for the client to request a bundle/batch of resource requests.",
      "createdAt": "2023-08-07T15:58:20Z",
      "updatedAt": "2023-08-17T14:04:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Is there a technical reason why requesting multiple resources in parallel work for this use case? H2 and H3 handle parallel requests quite well.",
          "createdAt": "2023-08-08T14:52:35Z",
          "updatedAt": "2023-08-08T14:52:35Z"
        },
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "I'm not sure of the spelling, but effectively we want the client to say \"please give me all the FOO configurations\" (ie please give me all the PST issuer configurations).\r\n\r\nThe current way of doing this might be to fetch a \"FOO_directory\" resource that lists all the configuration resource identifiers and then run a bunch of parallel requests for each of those resources, but now we have at least one extra hop for the directory fetch. ",
          "createdAt": "2023-08-14T13:48:16Z",
          "updatedAt": "2023-08-14T13:48:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "body": "Is that extra hop -- especially for an offline step -- really worth complicating the protocol?",
          "createdAt": "2023-08-15T17:55:38Z",
          "updatedAt": "2023-08-15T17:55:38Z"
        },
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "My gut is that at scale, one resource request vs 11 (assuming around 10 issuer configurations) would have a substantial impact on latency and bandwidth for the K-check service (and caching) even with parallel requests. Though maybe CDNs have already solved some of the caching/bandwidth issues (local caching of results?) that K-check servers can rely on?",
          "createdAt": "2023-08-17T14:04:53Z",
          "updatedAt": "2023-08-17T14:04:53Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 2,
      "id": "PR_kwDOJv72Bc5UBxwa",
      "title": "Improve mirror protocol",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/pull/2",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-27T12:23:49Z",
      "updatedAt": "2023-06-29T14:06:10Z",
      "baseRepository": "chris-wood/draft-group-privacypass-k-check",
      "baseRefName": "main",
      "baseRefOid": "589d00fd0754d45aa1f790086b8a177f7fbd94e7",
      "headRepository": "chris-wood/draft-group-privacypass-k-check",
      "headRefName": "caw/better",
      "headRefOid": "3ea27d1d3ee5edc046da4c593f23246024dd5f6c",
      "closedAt": "2023-06-29T14:06:09Z",
      "mergedAt": "2023-06-29T14:06:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5417e54a7a7c32ba33c8bfb05cc201bd6738162e"
      },
      "comments": [
        {
          "author": "beurdouche",
          "authorAssociation": "NONE",
          "body": "That looks fine \ud83d\udc4d ",
          "createdAt": "2023-06-28T16:12:49Z",
          "updatedAt": "2023-06-28T16:12:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJv72Bc5ZmcrR",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T14:28:44Z",
          "updatedAt": "2023-06-28T14:32:19Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I wonder if the mirror should just be enforcing this. It doesn't seem possible for the mirror to enforce max validity windows without making these decisions locally (it can't tell max-age=10 seconds means that the resource caching is too low or it has just hit the resource towards the end of its lifetime.",
              "createdAt": "2023-06-28T14:28:44Z",
              "updatedAt": "2023-06-28T14:32:19Z"
            },
            {
              "originalPosition": 59,
              "body": "Should this take into account the Accept header from the client? ",
              "createdAt": "2023-06-28T14:30:34Z",
              "updatedAt": "2023-06-28T14:32:19Z"
            },
            {
              "originalPosition": 79,
              "body": "Should there be logic for network/server errors from the target not accidentally polluting the mirror's cache for some temporary outage?",
              "createdAt": "2023-06-28T14:31:37Z",
              "updatedAt": "2023-06-28T14:32:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5Zmm0m",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T14:40:18Z",
          "updatedAt": "2023-06-28T14:40:18Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Yeah, maybe. Let's track this in #1.",
              "createdAt": "2023-06-28T14:40:18Z",
              "updatedAt": "2023-06-28T14:40:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5Zmnr_",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T14:41:53Z",
          "updatedAt": "2023-06-28T14:41:53Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "As in, should the mirror, uh, mirror the Accept header from the client in its request to the target? If so, that seems like a good idea.",
              "createdAt": "2023-06-28T14:41:53Z",
              "updatedAt": "2023-06-28T14:41:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5Zmn10",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T14:42:08Z",
          "updatedAt": "2023-06-28T14:42:09Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "We probably should have a path for this, yeah. I'll add it.",
              "createdAt": "2023-06-28T14:42:08Z",
              "updatedAt": "2023-06-28T14:42:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5ZmpCw",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T14:43:55Z",
          "updatedAt": "2023-06-28T14:43:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJv72Bc5Zm0X7",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T15:03:28Z",
          "updatedAt": "2023-06-28T15:03:28Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Yeah, since different clients may expect different things or accept different variants/content-types. Though this might also complicate the caching logic if different Accept values result in different resource responses from the target.",
              "createdAt": "2023-06-28T15:03:28Z",
              "updatedAt": "2023-06-28T15:03:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5ZtIJP",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T10:26:05Z",
          "updatedAt": "2023-06-29T10:26:05Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Looking at this again, there's already text above which says that mirror replies to clients with 4xx if the mirror request fails for any reasons. ",
              "createdAt": "2023-06-29T10:26:05Z",
              "updatedAt": "2023-06-29T10:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5Zuj72",
          "commit": {
            "abbreviatedOid": "84aa982"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T14:06:04Z",
          "updatedAt": "2023-06-29T14:06:05Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I had to check the spec, but it turns out that Accept doesn't complicate caching as much as the Vary header, so I left this in.",
              "createdAt": "2023-06-29T14:06:05Z",
              "updatedAt": "2023-06-29T14:06:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOJv72Bc5UUn3e",
      "title": "Align with main consistency document",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/pull/3",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-30T11:14:48Z",
      "updatedAt": "2023-07-06T11:30:04Z",
      "baseRepository": "chris-wood/draft-group-privacypass-k-check",
      "baseRefName": "main",
      "baseRefOid": "5417e54a7a7c32ba33c8bfb05cc201bd6738162e",
      "headRepository": "chris-wood/draft-group-privacypass-k-check",
      "headRefName": "caw/align",
      "headRefOid": "0556dcbdfc68033ca630d0fb97bdd6b22b46621f",
      "closedAt": "2023-07-06T11:30:03Z",
      "mergedAt": "2023-07-06T11:30:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f6baeff15a7550ab185e6699ed91a0b318b62507"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJv72Bc5aRz4J",
          "commit": {
            "abbreviatedOid": "d10fec3"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-05T14:07:33Z",
          "updatedAt": "2023-07-05T14:13:59Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nHTTP in which privacy goals require that clients have a consistent view of some protocol-specific\r\n```\r\nI personally find \"wherein\" a bit formal",
              "createdAt": "2023-07-05T14:07:33Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nDeployments of protocols such as Privacy Pass and OHTTP requires that very large sets of clients\r\nshare the same key, or even that all clients globally share the same key. This is because the privacy properties depend on the client\r\n```",
              "createdAt": "2023-07-05T14:09:48Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\na particular client belongs. Using a unique, client-specific key would yield an anonymity set\r\n```",
              "createdAt": "2023-07-05T14:10:06Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nuse the same key as one another are said to have a consistent view of the key.\r\n```",
              "createdAt": "2023-07-05T14:10:24Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\na concrete instantiation of one of those designs, \"Shared Cache Discovery\". In particular,\r\n```",
              "createdAt": "2023-07-05T14:11:06Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nThe mirror protocol is a simple HTTP-based protocol similar to a reverse proxy. Each mirror\r\n```",
              "createdAt": "2023-07-05T14:13:42Z",
              "updatedAt": "2023-07-05T14:13:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOJv72Bc5VGHjr",
      "title": "First come first serve check",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/pull/4",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T14:43:27Z",
      "updatedAt": "2023-07-10T18:43:05Z",
      "baseRepository": "chris-wood/draft-group-privacypass-k-check",
      "baseRefName": "main",
      "baseRefOid": "f6baeff15a7550ab185e6699ed91a0b318b62507",
      "headRepository": "chris-wood/draft-group-privacypass-k-check",
      "headRefName": "caw/fcfs",
      "headRefOid": "52d8126151e245aab23c8f02b476bf8d0f1007a1",
      "closedAt": "2023-07-10T18:43:05Z",
      "mergedAt": "2023-07-10T18:43:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "105824414905afdaed8a987e3a59da7d576e3bfa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJv72Bc5avJ91",
          "commit": {
            "abbreviatedOid": "da86a05"
          },
          "author": "sysrqb",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T15:05:44Z",
          "updatedAt": "2023-07-10T15:08:03Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Is this saying that the \"first valid representation\" is:\r\n1. The first resource, sorted by \"not-before\" value, if present\r\n1. Otherwise, the first resource, sorted lexicographically by keyid?",
              "createdAt": "2023-07-10T15:05:44Z",
              "updatedAt": "2023-07-10T15:08:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5avQjl",
          "commit": {
            "abbreviatedOid": "da86a05"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:18:43Z",
          "updatedAt": "2023-07-10T15:18:43Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "It's saying that it's the first key in the list that the client would attempt to use. ",
              "createdAt": "2023-07-10T15:18:43Z",
              "updatedAt": "2023-07-10T15:18:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5avRIq",
          "commit": {
            "abbreviatedOid": "da86a05"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T15:19:58Z",
          "updatedAt": "2023-07-10T15:20:01Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Might be nice to clarify \"the first valid representation (the first entry in the list that the client is able to use)\"...",
              "createdAt": "2023-07-10T15:19:58Z",
              "updatedAt": "2023-07-10T15:20:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5avRfs",
          "commit": {
            "abbreviatedOid": "da86a05"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:20:43Z",
          "updatedAt": "2023-07-10T15:20:44Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nClients compute the first valid representation of this directory, i.e., the first entry in the list that the client can use, which might be the key ID\r\n```",
              "createdAt": "2023-07-10T15:20:44Z",
              "updatedAt": "2023-07-10T15:20:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJv72Bc5avRju",
          "commit": {
            "abbreviatedOid": "da86a05"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:20:51Z",
          "updatedAt": "2023-07-10T15:20:52Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Yep, done!",
              "createdAt": "2023-07-10T15:20:51Z",
              "updatedAt": "2023-07-10T15:20:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOJv72Bc5VIHXy",
      "title": "Add as author",
      "url": "https://github.com/chris-wood/draft-group-privacypass-k-check/pull/6",
      "state": "MERGED",
      "author": "sysrqb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T20:22:29Z",
      "updatedAt": "2023-07-10T20:23:19Z",
      "baseRepository": "chris-wood/draft-group-privacypass-k-check",
      "baseRefName": "main",
      "baseRefOid": "1f50e3d918735dd1c9a52d6d9612d6ee1bb07bec",
      "headRepository": "sysrqb/draft-group-privacypass-k-check",
      "headRefName": "author",
      "headRefOid": "31a1b48b73140f1bc7898be1208989cb0a11e81c",
      "closedAt": "2023-07-10T20:23:19Z",
      "mergedAt": "2023-07-10T20:23:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "57dd72defef1180f256bde8a29171b365366dce3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJv72Bc5axuzp",
          "commit": {
            "abbreviatedOid": "31a1b48"
          },
          "author": "chris-wood",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T20:23:12Z",
          "updatedAt": "2023-07-10T20:23:12Z",
          "comments": []
        }
      ]
    }
  ]
}